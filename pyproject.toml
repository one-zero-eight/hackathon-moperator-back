[tool.poetry]
name = "fastapi-template"
version = "0.1.0"
description = ""
authors = ["one-zero-eight <https://t.me/one_zero_eight>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.11"
fastapi = { extras = ["all"], version = "^0.104.0" }
ruff = "^0.1.3"
pydantic-settings = "^2.0.3"
pydantic = { version = "^2.4.2", extras = ["email"] }
cryptography = "^41.0.5"
authlib = "^1.2.1"
sqlalchemy = "^2.0.22"
alembic = "^1.12.1"
asyncpg = "^0.28.0"
psycopg2-binary = "^2.9.9"
paramiko = "^3.3.1"

[tool.poetry.group.prod.dependencies]
gunicorn = "21.2.0"

[tool.poetry.group.dev.dependencies]
ruff = "^0.1.3"
pre-commit = "^3.5.0"

[tool.poetry.group.test.dependencies]
pytest = "^7.4.0"
pytest-asyncio = "^0.21.0"
pytest-cov = "^4.1.0"

[tool.pytest.ini_options]
pythonpath = "."
testpaths = "tests"
addopts = [
    "--strict-config",
    "--strict-markers",
]

[tool.ruff]
line-length = 120

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.coverage.run]
omit = ["src/dev.py"]

[tool.coverage.report]
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if enabled:",
    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",
    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",
    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
    # Don't complain about TYPE_CHECKING imports:
    "if TYPE_CHECKING:",
]

ignore_errors = true
